#include <Wire.h>
#include <WiFi.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"
#include "heartRate.h"
#include <driver/ledc.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>


MAX30105 particleSensor;

#define MAX_BRIGHTNESS 255

uint32_t irBuffer[100];   // infrared LED sensor data
uint32_t redBuffer[100];  // red LED sensor data

#define REPORTING_PERIOD_MS 1000  // frequency of updates sent to blynk app in ms

const char* ssid = "ESP32-Access-Point";
const char* password = "11223344";
String stringOne;


// MQTT settings
const char* mqtt_broker = "192.168.4.2";
const char* mqtt_client_id = "esp32-sensor";
const char* mqtt_topic = "measure";

int bpmArr[500];
int spoArr[500];

// Create WiFi and MQTT client instances
WiFiClient espClient;
PubSubClient client(espClient);

char auth[] = "";  // You should get Auth Token in the Blynk App.


uint32_t tsLastReport = 0;  // stores the time the last update was sent to the blynk app

int32_t bufferLength = 100;  // data length
int32_t spo2;                // SPO2 value
int8_t validSPO2;            // indicator to show if the SPO2 calculation is valid
int32_t heartRate;           // heart rate value calculated as per Maxim's algorithm
int8_t validHeartRate;       // indicator to show if the heart rate calculation is valid

byte pulseLED = 2;  // onboard led on esp32 nodemcu
byte readLED = 19;  // Blinks with each data read

long lastBeat = 0;  // Time at which the last beat occurred

int beatsPerMinute;            // stores the BPM as per custom algorithm
int beatAvg = 0, sp02Avg = 0;  // stores the average BPM and SPO2
float ledBlinkFreq;            // stores the frequency to blink the pulseLED
bool i = true;
int count;

void setup() {
  ledcSetup(0, 5000, 8);  // channel 0, 5000 Hz, 8-bit resolution
  ledcAttachPin(2, 0);    // attach GPIO 2 to channel 0

  ledcWrite(0, 255);


  Serial.begin(115200);

  Serial.print("Initializing Pulse Oximeter..");

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {  // Use default I2C port, 400kHz speed
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
    while (1)
      ;
  }
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP");
  Serial.println(IP);

  client.setServer(mqtt_broker, 1883);

  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    if (client.connect(mqtt_client_id)) {
      Serial.println("Connected to MQTT");
    } else {
      Serial.print("Failed to connect to MQTT. State: ");
      Serial.println(client.state());
      delay(2000);
    }
  }
  // Set parameters for sensor
  byte ledBrightness = 50;  // Options: 0=Off to 255=50mA
  byte sampleAverage = 1;   // Options: 1, 2, 4, 8, 16, 32
  byte ledMode = 2;         // Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100;    // Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 69;      // Options: 69, 118, 215, 411
  int adcRange = 4096;      // Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);  // Configure sensor with these settings
}

void loop() {


  i = true;
  if (!client.connected()) {
    while (!client.connected()) {
      Serial.println("Reconnecting to MQTT...");
      if (client.connect(mqtt_client_id)) {
        Serial.println("Reconnected to MQTT");
      } else {
        Serial.print("Failed to reconnect to MQTT. State: ");
        Serial.println(client.state());
      }
    }
  }
  long irValue = particleSensor.getIR();

  if (irValue < 50000) {
    // No finger detected
    Serial.println("No finger?");
    beatsPerMinute = 0;
    sp02Avg = 0;
  } else {
    bufferLength = 50;  //buffer length of 100 stores 4 seconds of samples running at 25sps

    //read the first 100 samples, and determine the signal range
    for (byte i = 0; i < bufferLength; i++) {
      while (particleSensor.available() == false)  //do we have new data?
        particleSensor.check();                    //Check the sensor for new data

      redBuffer[i] = particleSensor.getIR();
      irBuffer[i] = particleSensor.getRed();
      particleSensor.nextSample();  //We're finished with this sample so move to next sample
    }

    //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

    //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
    while (i = true) {

      //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
      for (byte i = 25; i < 100; i++) {
        redBuffer[i - 25] = redBuffer[i];
        irBuffer[i - 25] = irBuffer[i];
      }

      //take 25 sets of samples before calculating the heart rate.
      for (byte i = 75; i < 100; i++) {
        while (particleSensor.available() == false)  //do we have new data?
          particleSensor.check();                    //Check the sensor for new data

        digitalWrite(readLED, !digitalRead(readLED));  //Blink onboard LED with every data read

        redBuffer[i] = particleSensor.getRed();
        irBuffer[i] = particleSensor.getIR();
        particleSensor.nextSample();  //We're finished with this sample so move to next sample

        long irValue = irBuffer[i];

        //Calculate BPM independent of Maxim Algorithm.
        if (checkForBeat(irValue) == true) {
          //We sensed a beat!
          long delta = millis() - lastBeat;
          lastBeat = millis();

          beatsPerMinute = 60 / (delta / 1000.0);
          beatAvg = (beatAvg + beatsPerMinute) / 2;

          if (beatAvg != 0)
            ledBlinkFreq = (float)(60.0 / beatAvg);
          else
            ledBlinkFreq = 0;
          ledcWriteTone(0, ledBlinkFreq);
        }
        if (millis() - lastBeat > 10000) {
          beatsPerMinute = 0;
          beatAvg = (beatAvg + beatsPerMinute) / 2;

          if (beatAvg != 0)
            ledBlinkFreq = (float)(60.0 / beatAvg);
          else
            ledBlinkFreq = 0;
          ledcWriteTone(0, ledBlinkFreq);
        }
      }

      //After gathering 25 new samples recalculate HR and SP02
      maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

      if (validSPO2 == 1 && spo2 < 100 && spo2 > 0) {
        sp02Avg = (sp02Avg + spo2) / 2;
      } else {
        spo2 = 0;
        sp02Avg = (sp02Avg + spo2) / 2;
        ;
      }

      if (count == 5) {
        StaticJsonDocument<200> doc;
        doc["BPM"] = beatAvg;
        doc["spo"] = sp02Avg;
        char payload[200];
        serializeJson(doc, payload);
        Serial.println(payload);
        count = 0;
        if (client.publish(mqtt_topic, payload)) {
          Serial.println("Message published successfully");
          Serial.println(payload);
          memset(payload, 0, sizeof(payload));
          i = false;

        } else {
          Serial.println("Failed to publish message");
        }
      } else {
        count++;
        Serial.println(count);
      }
    }
  }
}